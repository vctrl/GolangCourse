// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/common/collection_helper.go

// Package common is a generated GoMock package.
package common

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	options "go.mongodb.org/mongo-driver/mongo/options"
	reflect "reflect"
)

// MockCollectionHelper is a mock of CollectionHelper interface
type MockCollectionHelper struct {
	ctrl     *gomock.Controller
	recorder *MockCollectionHelperMockRecorder
}

// MockCollectionHelperMockRecorder is the mock recorder for MockCollectionHelper
type MockCollectionHelperMockRecorder struct {
	mock *MockCollectionHelper
}

// NewMockCollectionHelper creates a new mock instance
func NewMockCollectionHelper(ctrl *gomock.Controller) *MockCollectionHelper {
	mock := &MockCollectionHelper{ctrl: ctrl}
	mock.recorder = &MockCollectionHelperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCollectionHelper) EXPECT() *MockCollectionHelperMockRecorder {
	return m.recorder
}

// Find mocks base method
func (m *MockCollectionHelper) Find(ctx context.Context, filter interface{}, opts ...*options.FindOptions) (CursorHelper, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, filter}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Find", varargs...)
	ret0, _ := ret[0].(CursorHelper)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find
func (mr *MockCollectionHelperMockRecorder) Find(ctx, filter interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, filter}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockCollectionHelper)(nil).Find), varargs...)
}

// FindOne mocks base method
func (m *MockCollectionHelper) FindOne(ctx context.Context, filter interface{}, opts ...*options.FindOneOptions) SingleResultHelper {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, filter}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindOne", varargs...)
	ret0, _ := ret[0].(SingleResultHelper)
	return ret0
}

// FindOne indicates an expected call of FindOne
func (mr *MockCollectionHelperMockRecorder) FindOne(ctx, filter interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, filter}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOne", reflect.TypeOf((*MockCollectionHelper)(nil).FindOne), varargs...)
}

// FindOneAndUpdate mocks base method
func (m *MockCollectionHelper) FindOneAndUpdate(ctx context.Context, filter, update interface{}, opts ...*options.FindOneAndUpdateOptions) SingleResultHelper {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, filter, update}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindOneAndUpdate", varargs...)
	ret0, _ := ret[0].(SingleResultHelper)
	return ret0
}

// FindOneAndUpdate indicates an expected call of FindOneAndUpdate
func (mr *MockCollectionHelperMockRecorder) FindOneAndUpdate(ctx, filter, update interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, filter, update}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneAndUpdate", reflect.TypeOf((*MockCollectionHelper)(nil).FindOneAndUpdate), varargs...)
}

// InsertOne mocks base method
func (m *MockCollectionHelper) InsertOne(ctx context.Context, document interface{}, opts ...*options.InsertOneOptions) (InsertOneResultHelper, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, document}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InsertOne", varargs...)
	ret0, _ := ret[0].(InsertOneResultHelper)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertOne indicates an expected call of InsertOne
func (mr *MockCollectionHelperMockRecorder) InsertOne(ctx, document interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, document}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOne", reflect.TypeOf((*MockCollectionHelper)(nil).InsertOne), varargs...)
}

// UpdateOne mocks base method
func (m *MockCollectionHelper) UpdateOne(ctx context.Context, filter, update interface{}, opts ...*options.UpdateOptions) (UpdateResultHelper, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, filter, update}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateOne", varargs...)
	ret0, _ := ret[0].(UpdateResultHelper)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOne indicates an expected call of UpdateOne
func (mr *MockCollectionHelperMockRecorder) UpdateOne(ctx, filter, update interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, filter, update}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOne", reflect.TypeOf((*MockCollectionHelper)(nil).UpdateOne), varargs...)
}

// DeleteOne mocks base method
func (m *MockCollectionHelper) DeleteOne(ctx context.Context, filter interface{}, opts ...*options.DeleteOptions) (DeleteResultHelper, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, filter}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteOne", varargs...)
	ret0, _ := ret[0].(DeleteResultHelper)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteOne indicates an expected call of DeleteOne
func (mr *MockCollectionHelperMockRecorder) DeleteOne(ctx, filter interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, filter}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOne", reflect.TypeOf((*MockCollectionHelper)(nil).DeleteOne), varargs...)
}

// MockSingleResultHelper is a mock of SingleResultHelper interface
type MockSingleResultHelper struct {
	ctrl     *gomock.Controller
	recorder *MockSingleResultHelperMockRecorder
}

// MockSingleResultHelperMockRecorder is the mock recorder for MockSingleResultHelper
type MockSingleResultHelperMockRecorder struct {
	mock *MockSingleResultHelper
}

// NewMockSingleResultHelper creates a new mock instance
func NewMockSingleResultHelper(ctrl *gomock.Controller) *MockSingleResultHelper {
	mock := &MockSingleResultHelper{ctrl: ctrl}
	mock.recorder = &MockSingleResultHelperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSingleResultHelper) EXPECT() *MockSingleResultHelperMockRecorder {
	return m.recorder
}

// Decode mocks base method
func (m *MockSingleResultHelper) Decode(v interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decode", v)
	ret0, _ := ret[0].(error)
	return ret0
}

// Decode indicates an expected call of Decode
func (mr *MockSingleResultHelperMockRecorder) Decode(v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decode", reflect.TypeOf((*MockSingleResultHelper)(nil).Decode), v)
}

// MockCursorHelper is a mock of CursorHelper interface
type MockCursorHelper struct {
	ctrl     *gomock.Controller
	recorder *MockCursorHelperMockRecorder
}

// MockCursorHelperMockRecorder is the mock recorder for MockCursorHelper
type MockCursorHelperMockRecorder struct {
	mock *MockCursorHelper
}

// NewMockCursorHelper creates a new mock instance
func NewMockCursorHelper(ctrl *gomock.Controller) *MockCursorHelper {
	mock := &MockCursorHelper{ctrl: ctrl}
	mock.recorder = &MockCursorHelperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCursorHelper) EXPECT() *MockCursorHelperMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockCursorHelper) Close(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockCursorHelperMockRecorder) Close(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockCursorHelper)(nil).Close), ctx)
}

// All mocks base method
func (m *MockCursorHelper) All(ctx context.Context, results interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All", ctx, results)
	ret0, _ := ret[0].(error)
	return ret0
}

// All indicates an expected call of All
func (mr *MockCursorHelperMockRecorder) All(ctx, results interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockCursorHelper)(nil).All), ctx, results)
}

// MockInsertOneResultHelper is a mock of InsertOneResultHelper interface
type MockInsertOneResultHelper struct {
	ctrl     *gomock.Controller
	recorder *MockInsertOneResultHelperMockRecorder
}

// MockInsertOneResultHelperMockRecorder is the mock recorder for MockInsertOneResultHelper
type MockInsertOneResultHelperMockRecorder struct {
	mock *MockInsertOneResultHelper
}

// NewMockInsertOneResultHelper creates a new mock instance
func NewMockInsertOneResultHelper(ctrl *gomock.Controller) *MockInsertOneResultHelper {
	mock := &MockInsertOneResultHelper{ctrl: ctrl}
	mock.recorder = &MockInsertOneResultHelperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockInsertOneResultHelper) EXPECT() *MockInsertOneResultHelperMockRecorder {
	return m.recorder
}

// GetInsertedID mocks base method
func (m *MockInsertOneResultHelper) GetInsertedID() interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInsertedID")
	ret0, _ := ret[0].(interface{})
	return ret0
}

// GetInsertedID indicates an expected call of GetInsertedID
func (mr *MockInsertOneResultHelperMockRecorder) GetInsertedID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInsertedID", reflect.TypeOf((*MockInsertOneResultHelper)(nil).GetInsertedID))
}

// MockUpdateResultHelper is a mock of UpdateResultHelper interface
type MockUpdateResultHelper struct {
	ctrl     *gomock.Controller
	recorder *MockUpdateResultHelperMockRecorder
}

// MockUpdateResultHelperMockRecorder is the mock recorder for MockUpdateResultHelper
type MockUpdateResultHelperMockRecorder struct {
	mock *MockUpdateResultHelper
}

// NewMockUpdateResultHelper creates a new mock instance
func NewMockUpdateResultHelper(ctrl *gomock.Controller) *MockUpdateResultHelper {
	mock := &MockUpdateResultHelper{ctrl: ctrl}
	mock.recorder = &MockUpdateResultHelperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUpdateResultHelper) EXPECT() *MockUpdateResultHelperMockRecorder {
	return m.recorder
}

// GetModifiedCount mocks base method
func (m *MockUpdateResultHelper) GetModifiedCount() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModifiedCount")
	ret0, _ := ret[0].(int64)
	return ret0
}

// GetModifiedCount indicates an expected call of GetModifiedCount
func (mr *MockUpdateResultHelperMockRecorder) GetModifiedCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModifiedCount", reflect.TypeOf((*MockUpdateResultHelper)(nil).GetModifiedCount))
}

// MockDeleteResultHelper is a mock of DeleteResultHelper interface
type MockDeleteResultHelper struct {
	ctrl     *gomock.Controller
	recorder *MockDeleteResultHelperMockRecorder
}

// MockDeleteResultHelperMockRecorder is the mock recorder for MockDeleteResultHelper
type MockDeleteResultHelperMockRecorder struct {
	mock *MockDeleteResultHelper
}

// NewMockDeleteResultHelper creates a new mock instance
func NewMockDeleteResultHelper(ctrl *gomock.Controller) *MockDeleteResultHelper {
	mock := &MockDeleteResultHelper{ctrl: ctrl}
	mock.recorder = &MockDeleteResultHelperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDeleteResultHelper) EXPECT() *MockDeleteResultHelperMockRecorder {
	return m.recorder
}

// GetDeletedCount mocks base method
func (m *MockDeleteResultHelper) GetDeletedCount() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeletedCount")
	ret0, _ := ret[0].(int64)
	return ret0
}

// GetDeletedCount indicates an expected call of GetDeletedCount
func (mr *MockDeleteResultHelperMockRecorder) GetDeletedCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeletedCount", reflect.TypeOf((*MockDeleteResultHelper)(nil).GetDeletedCount))
}

// MockFindOneResultHelper is a mock of FindOneResultHelper interface
type MockFindOneResultHelper struct {
	ctrl     *gomock.Controller
	recorder *MockFindOneResultHelperMockRecorder
}

// MockFindOneResultHelperMockRecorder is the mock recorder for MockFindOneResultHelper
type MockFindOneResultHelperMockRecorder struct {
	mock *MockFindOneResultHelper
}

// NewMockFindOneResultHelper creates a new mock instance
func NewMockFindOneResultHelper(ctrl *gomock.Controller) *MockFindOneResultHelper {
	mock := &MockFindOneResultHelper{ctrl: ctrl}
	mock.recorder = &MockFindOneResultHelperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFindOneResultHelper) EXPECT() *MockFindOneResultHelperMockRecorder {
	return m.recorder
}
