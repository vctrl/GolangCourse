// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/handlers/comments.go

// Package handlers is a generated GoMock package.
package handlers

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	comments "redditclone/pkg/comments"
	reflect "reflect"
)

// MockCommentsRepo is a mock of CommentsRepo interface
type MockCommentsRepo struct {
	ctrl     *gomock.Controller
	recorder *MockCommentsRepoMockRecorder
}

// MockCommentsRepoMockRecorder is the mock recorder for MockCommentsRepo
type MockCommentsRepoMockRecorder struct {
	mock *MockCommentsRepo
}

// NewMockCommentsRepo creates a new mock instance
func NewMockCommentsRepo(ctrl *gomock.Controller) *MockCommentsRepo {
	mock := &MockCommentsRepo{ctrl: ctrl}
	mock.recorder = &MockCommentsRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCommentsRepo) EXPECT() *MockCommentsRepoMockRecorder {
	return m.recorder
}

// GetByPostID mocks base method
func (m *MockCommentsRepo) GetByPostID(arg0 context.Context, arg1 interface{}) ([]*comments.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByPostID", arg0, arg1)
	ret0, _ := ret[0].([]*comments.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByPostID indicates an expected call of GetByPostID
func (mr *MockCommentsRepoMockRecorder) GetByPostID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByPostID", reflect.TypeOf((*MockCommentsRepo)(nil).GetByPostID), arg0, arg1)
}

// GetByID mocks base method
func (m *MockCommentsRepo) GetByID(arg0 context.Context, arg1 interface{}) (*comments.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0, arg1)
	ret0, _ := ret[0].(*comments.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID
func (mr *MockCommentsRepoMockRecorder) GetByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockCommentsRepo)(nil).GetByID), arg0, arg1)
}

// Add mocks base method
func (m *MockCommentsRepo) Add(arg0 context.Context, arg1 *comments.Comment) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", arg0, arg1)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add
func (mr *MockCommentsRepoMockRecorder) Add(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockCommentsRepo)(nil).Add), arg0, arg1)
}

// Delete mocks base method
func (m *MockCommentsRepo) Delete(arg0 context.Context, arg1 interface{}) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockCommentsRepoMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCommentsRepo)(nil).Delete), arg0, arg1)
}

// ParseID mocks base method
func (m *MockCommentsRepo) ParseID(in string) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseID", in)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseID indicates an expected call of ParseID
func (mr *MockCommentsRepoMockRecorder) ParseID(in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseID", reflect.TypeOf((*MockCommentsRepo)(nil).ParseID), in)
}
